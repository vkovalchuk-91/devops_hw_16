name: Docker Image

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the Terraform action to perform'
        required: true
        default: 'step2'
        type: choice
        options:
          - 'step2'
          - 'destroy'

env:
  AWS_REGION: "eu-central-1"
  ECR_REPOSITORY: "wordpress-repo"
  IMAGE_TAG: "custom"

jobs:
  ECR:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set initial Terraform status
        if: contains(github.event.inputs.action, 'step2')
        run: |
          echo "DOCKER_BUILD_STATUS=❌ Failed" >> $GITHUB_ENV
          echo "DOCKER_PUSH_STATUS=❌ Failed" >> $GITHUB_ENV
          echo "ECR_IMAGE_REMOVE_STATUS=❌ Failed" >> $GITHUB_ENV
        
      - name: Ensure ECR Repository Exists
        if: contains(github.event.inputs.action, 'step2')
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Set RDS value
        run: echo "RDS=your-rds-value" >> $GITHUB_ENV

      - name: Create Temporary Build Directory
        if: contains(github.event.inputs.action, 'step2')
        run: mkdir -p /tmp/docker-build

      - name: Generate wp-config.php in /tmp
        if: contains(github.event.inputs.action, 'step2')
        run: |
          cat > /tmp/docker-build/wp-config.php <<EOL
          <?php
          define( 'DB_NAME', 'wordpress' );
          define( 'DB_USER', 'admin' );
          define( 'DB_PASSWORD', 'StrongPassword123!' );
          define( 'DB_HOST', '${{ env.RDS }}' );
          define( 'DB_CHARSET', 'utf8' );
          define( 'DB_COLLATE', '' );
          
          $table_prefix = 'wp_';
          
          define( 'WP_DEBUG', false );
          
          if ( ! defined( 'ABSPATH' ) ) {
          	define( 'ABSPATH', __DIR__ . '/' );
          }
          
          require_once ABSPATH . 'wp-settings.php';
          EOL

      - name: Generate Dockerfile in /tmp
        if: contains(github.event.inputs.action, 'step2')
        run: |
          cat > /tmp/docker-build/Dockerfile <<EOL
          FROM wordpress:latest
          COPY wp-config.php /var/www/html/wp-config.php
          EOL

      - name: Build Docker Image
        if: contains(github.event.inputs.action, 'step2')
        id: docker_build_step2
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI /tmp/docker-build
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push Docker Image to ECR
        if: contains(github.event.inputs.action, 'step2')
        id: docker_push_step2
        run: |
          docker push $IMAGE_URI

      - name: Collect status (step2)
        if: contains(github.event.inputs.action, 'step2')
        id: collect_status_step2
        run: |
          echo "DOCKER_BUILD_STATUS=$([[ '${{ steps.docker_build_step2.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV
          echo "DOCKER_PUSH_STATUS=$([[ '${{ steps.docker_push_step2.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV

      - name: Send Telegram Notification (step2)
        if: contains(github.event.inputs.action, 'step2')
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            *Build and Push WordPress Docker Image to ECR Results (step2)*:
            *Docker build Status*: ${{ env.DOCKER_BUILD_STATUS }}
            *Docker push Status*: ${{ env.DOCKER_PUSH_STATUS }}
            *Image URI*: ${{ env.IMAGE_URI }}

      - name: Check if ECR repository exists
        if: contains(github.event.inputs.action, 'destroy')
        id: check_repo
        run: |
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" > /dev/null 2>&1; then
            echo "Repository exists"
            echo "ECR_REPOSITORY_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist"
            echo "ECR_REPOSITORY_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Remove Docker Image from ECR
        if: env.ECR_REPOSITORY_EXISTS == 'true' && contains(github.event.inputs.action, 'destroy')
        id: ecr_image_remove_destroy
        run: |
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG

      - name: Collect status (destroy)
        if: contains(github.event.inputs.action, 'destroy')
        id: collect_status_destroy
        run: |
          echo "ECR_IMAGE_REMOVE_STATUS=$([[ '${{ steps.ecr_image_remove_destroy.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV

      - name: Send Telegram Notification (destroy)
        if: contains(github.event.inputs.action, 'destroy')
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            *ECR Image remove Results (destroy)*:
            *ECR Image remove Status*: ${{ env.ECR_IMAGE_REMOVE_STATUS }}
